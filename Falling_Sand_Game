#version 300 es
#ifdef GL_FRAGMENT_PRECISION_HIGH
precision highp float;
#else
precision mediump float;
#endif

out vec4 COLOR;

uniform int pointerCount;
uniform vec3 pointers[10];
uniform vec2 resolution;
uniform sampler2D backbuffer;
uniform int frame;

void main(void) {
    vec2 uv = gl_FragCoord.xy / resolution;
    vec2 texel = 1.0 / resolution;

    vec3 empty = vec3(0.0);
    vec3 color = empty;
    vec3 current = texture(backbuffer, uv).rgb;

    vec3 up         = texture(backbuffer, uv + vec2(0.0, texel.y)).rgb;
    vec3 down       = texture(backbuffer, uv + vec2(0.0, -texel.y)).rgb;
    vec3 left       = texture(backbuffer, uv + vec2(-texel.x, 0.0)).rgb;
    vec3 leftUp     = texture(backbuffer, uv + vec2(-texel.x, texel.y)).rgb;
    vec3 rightDown  = texture(backbuffer, uv + vec2(texel.x, -texel.y)).rgb;

    float mirror = 1.0;
    if ((1793224213 >> (frame % 18)) % 2 == 0) {
        mirror = -1.0;
    }

    // Apply mirror to directions
    left      = texture(backbuffer, uv + vec2(-texel.x * mirror, 0.0)).rgb;
    leftUp    = texture(backbuffer, uv + vec2(-texel.x * mirror, texel.y)).rgb;
    rightDown = texture(backbuffer, uv + vec2(texel.x * mirror, -texel.y)).rgb;

    // Sand movement logic
    if (current != empty) {
        bool atBottom = gl_FragCoord.y < 1.0;
        bool blockedBelow = down != empty && rightDown != empty;

        if (atBottom || blockedBelow) {
            // Sand settles and fades slightly
            color = current - vec3(1.0 / 255.0, 1.0 / 255.0, 0.0);
        } else {
            // Sand falls
            color = empty;
        }

    } else if (up != empty) {
        // Sand falls down from above
        color = up - vec3(1.0 / 255.0, 0.0, 0.0);

    } else if (leftUp != empty && left != empty) {
        // Sand slides diagonally
        color = leftUp - vec3(1.0 / 255.0, 0.0, 0.0);
    }

    // Pointer interaction: drop sand
    for (int n = 0; n < pointerCount; n++) {
        int dx = int(pointers[n].x - gl_FragCoord.x);
        int dy = int(pointers[n].y - gl_FragCoord.y);

        if (frame % 1 == 0 && dx == 1 && (dy == 1 || dy == 3)) {
            color = vec3(1.0);
        }
    }

    COLOR = vec4(color, 1.0);
}